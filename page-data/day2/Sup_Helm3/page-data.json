{"componentChunkName":"component---src-pages-day-2-sup-helm-3-index-mdx","path":"/day2/Sup_Helm3/","result":{"pageContext":{"frontmatter":{"title":"OpenShift Platform Day2 - Supplement - Helm 3 for OpenShift","description":"OCP Day2 Upgrade","keywords":"ocp, day2, supplement, helm3"},"relativePagePath":"/day2/Sup_Helm3/index.mdx","titleType":"page","MdxNode":{"id":"8e289777-8962-5c8e-afb7-f9242a5b13a1","children":[],"parent":"90fe9232-9acf-569a-8f59-def443d8f481","internal":{"content":"---\ntitle: OpenShift Platform Day2 - Supplement - Helm 3 for OpenShift\ndescription: OCP Day2 Upgrade\nkeywords: 'ocp, day2, supplement, helm3'\n---\n\n\n# Helm 3 for OpenShift\nYou can find out many technical articles and blogs which talked about Helm on OpenShift. \nHelm is a package manager for Kubernetes that helps you more easily package, configure, and deploy applications onto Kubernetes clusters. OpenShift has been providing several deployment methods but Helm surprisingly.\n\nIn OpenShift 4.3, Helm 3 for OpenShift Container Platform is introduced as a Technology Preview feature.　Yeah!\n\nThere is a bog which talked about this feature. We encourage you to read the blog to understand Helm on OpenShift.\nhttps://blog.openshift.com/openshift-4-3-deploy-applications-with-helm-3/\n\n\nIn this document, we will not exaplin the feature of Helm on Openshift.  Instead, we will demonstrate the feature by following the steps in the OpenShift official document.\nSince the official product document does not include the actual commands output (results of commands execution), we will include those for your reference.  Other than those sample output, you can find out most of information in the product official document.\n\nhttps://docs.openshift.com/container-platform/4.3/cli_reference/helm_cli/getting-started-with-helm-on-openshift-container-platform.html\n\n\n## Environment\nFor this document, we use OpenShift 4.3.5 on Azure (installed via IPI, not ARO).\nWe will install Helm on our laptop which is MacBook Air. The OS is Mojava (10.14.6).\n\n\n## Installing Helm on Mac\nThere are two ways to install the Helm binary onto your laptop.\n\n### Installing Helm via CLI\nThe official document explains how to install Helm via CLI. For demonstration purposes, we will execute a few more commands than what the officail document said.\n\n\n1. Uninstall previous version of helm from the laptop\nIn our case, we unstall the helm 2 command which was installed previously to have a clean environment. If you don't have helm installed, then you can skip this. If you want to keep the previous helm installation, please find out the way to have multiple installations (versions) and make sure that it will work.\n\nRun **which** command to find out if helm command is in the PATH.\n```\nkenuenonoMacBook-Air:~ kenueno$ which helm\n/usr/local/bin/helm\nkenuenonoMacBook-Air:~ kenueno$ \n```\n\nIn out case, it's in the /usr/local/bin and it's Helm version 2. We ran **helm version** command as below.\n```\nkenuenonoMacBook-Air:~ kenueno$ helm version\nClient: &version.Version{SemVer:\"v2.9.1\", GitCommit:\"20adb27c7c5868466912eebdf6664e7390ebe710\", GitTreeState:\"clean\"}\n```\n\nThen, we ran **brew list** command to see if it's installed via **brew** as shown below.\n```\nkenuenonoMacBook-Air:~ kenueno$ brew list\nansible\t\t\tbash-completion@2\thelm\t\t\t    libnet\t\t\t    oniguruma\t\treadline\t\txz\nasdf\t\t\tcertbot\t\t\t    icu4c\t\t\t    libtool\t\t\t    openssl\t\t\tspruce\t\t\tyarn\naugeas\t\t\tcoreutils\t\t    jmeter\t\t\t    libunistring\t\topenssl@1.1\t\tsqlite\nautoconf\t\tdialog\t\t\t    jq\t\t\t        libyaml\t\t\t    pkg-config\t\ttcptraceroute\nautomake\t\tdvm\t\t\t        kubernetes-cli\t\tmaven\t\t\t    postgresql\t\ttree\nazure-cli\t\tgdbm\t\t\t    kubernetes-helm\t\tminikube\t\t    python\t\t\tunixodbc\nbash\t\t\tgettext\t\t\t    libidn2\t\t\t    node\t\t\t    python@3.8\t\twget\nkenuenonoMacBook-Air:~ kenueno$\n```\n\nSo, it's installed via brew. Then, ran **brew uninstall** command to delete helm version 2.\n```\nkenuenonoMacBook-Air:~ kenueno$ brew uninstall helm\nUninstalling /usr/local/Cellar/helm/2.9.1... (50 files, 66.2MB)\nkenuenonoMacBook-Air:~ kenueno$ \nkenuenonoMacBook-Air:~ kenueno$ brew uninstall kubernetes-helm\nError: No such keg: /usr/local/Cellar/helm\nkenuenonoMacBook-Air:~ kenueno$ \nkenuenonoMacBook-Air:~ kenueno$ brew list\nansible\t\t\tbash\t\t\t    gdbm\t\t\t    libidn2\t\t\t    minikube\t\tpostgresql\t    tcptraceroute\nasdf\t\t\tbash-completion@2\tgettext\t\t\t    libnet\t\t\t    node\t\t\tpython\t\t\ttree\naugeas\t\t\tcertbot\t\t\t    icu4c\t\t\t    libtool\t\t\t    oniguruma\t\tpython@3.8\t\tunixodbc\nautoconf\t\tcoreutils\t\t    jmeter\t\t\t    libunistring\t\topenssl\t\t\treadline\t\twget\nautomake\t\tdialog\t\t\t    jq\t\t\t        libyaml\t\t\t    openssl@1.1\t\tspruce\t\t\txz\nazure-cli\t\tdvm\t\t\t        kubernetes-cli\t\tmaven\t\t\t    pkg-config\t\tsqlite\t\t\tyarn\nkenuenonoMacBook-Air:~ kenueno$\n```\nAs you see above, we ran **brew uninstall helm** command and it deleted both **helm** and **kubernetes-helm** formulas.\n\nBefore we install helm 3, make sure that helm 2 is removed from /usr/local/bin and it's not in the PATH as follow.\n```\nkenuenonoMacBook-Air:~ kenueno$ ls -la /usr/local/bin/helm\nls: /usr/local/bin/helm: No such file or directory\nkenuenonoMacBook-Air:~ kenueno$ \nkenuenonoMacBook-Air:~ kenueno$ which helm\nkenuenonoMacBook-Air:~ kenueno$\n```\n\n2. Download the Helm binary and add it to your path\nNow, we will download the Helm 3 binary and put it into **/usr/local/bin** folder.\n```\nkenuenonoMacBook-Air:~ kenueno$ curl -L https://mirror.openshift.com/pub/openshift-v4/clients/helm/latest/helm-darwin-amd64 -o /usr/local/bin/helm\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 41.4M  100 41.4M    0     0   653k      0  0:01:04  0:01:04 --:--:--  629k\nkenuenonoMacBook-Air:~ kenueno$ \n```\n\nRight after you download it to your laptop, it is not executable.\n```\nkenuenonoMacBook-Air:~ kenueno$ which helm\n```\n\n3. Make the binary file executable\nRun **chmod** command to make the helm command executable as follow.\n```\nkenuenonoMacBook-Air:~ kenueno$ sudo chmod +x /usr/local/bin/helm\nPassword:\nkenuenonoMacBook-Air:~ kenueno$ which helm\n/usr/local/bin/helm\nkenuenonoMacBook-Air:~ kenueno$ \n```\nAs you see above, the **helm** command is now in the PATH (/usr/local/bin) and excecutable.\n\n4. Check the installed version\nRun **helm version** command as follow.\n```\nkenuenonoMacBook-Air:~ kenueno$ helm version\nversion.BuildInfo{Version:\"v3.1+unreleased\", GitCommit:\"7ebdbb86fca32c77f2fce166f7f9e58ebf7e9946\", GitTreeState:\"clean\", GoVersion:\"go1.13.4\"}\nkenuenonoMacBook-Air:~ kenueno$ \n```\nAs of writing this document, the latest version of the helm command from OpenShift site is v3.1 which is newer than what the official document said.\n\n\nhttps://docs.openshift.com/container-platform/4.3/cli_reference/helm_cli/getting-started-with-helm-on-openshift-container-platform.html#on-macos\n\n\n### Installing Helm via OpenShift Web console\nYou can also intall the helm binary via OpenShift Web console.\n\nOn the right-upper corner on the Web console, there is \"?\" mark button.　Click that button and you will see the **Command Line Tools** on the pull-down menu.\nClick on the **Command Line Tools** then you will see **Command Line Tools** page as shown in below.\n\n![helm1](/assets/img/day2/helm1.png \"Pull-down menu\")\n\nClick on **Download helm** link as shown in below.\n\n![helm2](/assets/img/day2/helm2.png \"Command Line Tools Page\")\n\nThen you will got to the external openshift site where you can see the list of helm binary. Select the binary to download as shown in below. In our case, we select **helm-darwin-adm64** for Mac.\n![helm3](/assets/img/day2/helm3.png \"List of Helm binary\")\n\n\nNow, you have the helm 3 command on your laptop. In the following sections, we will demonstrate two senarios.\n\n\n## Installing a Helm chart on OpenShift\nLet's install your first Helm chart on OpenShift 4.3.5 cluster.\n\n1. Make sure that you have helm 3 installed on your laptop (or where ever you would execute helm command)\n\n2. Make sure that your OpenShift 4.3 cluster is up and running\n\n3. Log in to your OpenShift cluster via CLI\nIn our case, we use the token instead of the password with **oc login** command as follow.\n\n```\nkenuenonoMacBook-Air:~ kenueno$ oc login --token=xdacabababa_fVweYqG3Gisgeasgh4_hpRietebarfZaB --server=https://api.csmoazure1.csmoprivate.tk:6443\nThe server uses a certificate signed by an unknown authority.\nYou can bypass the certificate check, but any data you send to the server could be intercepted by others.\nUse insecure connections? (y/n): y\n\nLogged into \"https://api.csmoazure1.csmoprivate.tk:6443\" as \"kenueno\" using the token provided.\n\nYou have access to 54 projects, the list has been suppressed. You can list all projects with 'oc projects'\n\nUsing project \"default\".\nkenuenonoMacBook-Air:~ kenueno$ \n```\n\n4. Create a new project\nRun **oc new-project** command to create a new project.  In our case, the name of project is \"mysql\" as shown below.\n\n```\nkenuenonoMacBook-Air:~ kenueno$ oc new-project mysql\nNow using project \"mysql\" on server \"https://api.csmoazure1.csmoprivate.tk:6443\".\n\nYou can add applications to this project with the 'new-app' command. For example, try:\n\n    oc new-app django-psql-example\n\nto build a new example application in Python. Or use kubectl to deploy a simple Kubernetes application:\n\n    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node\n\nkenuenonoMacBook-Air:~ kenueno$\n```\n\n\n5. Add a repository of Helm charts to your local Helm client\nRun **helm repo add** command and here is the command usage:\n> helm repo add [NAME] [URL] [flags]\n\n```\nkenuenonoMacBook-Air:~ kenueno$ helm repo add stable https://kubernetes-charts.storage.googleapis.com/\n\"stable\" has been added to your repositories\nkenuenonoMacBook-Air:~ kenueno$ \n```\n\n\n6. Update the repository\nRun **helm repo update** command.\n>Update gets the latest information about charts from the respective chart repositories.\n>Information is cached locally, where it is used by commands like 'helm search'.\n\n```\nkenuenonoMacBook-Air:~ kenueno$ helm repo update\nHang tight while we grab the latest from your chart repositories...\n...Successfully got an update from the \"stable\" chart repository\nUpdate Complete. ⎈ Happy Helming!⎈ \nkenuenonoMacBook-Air:~ kenueno$ \n```\nMake sure that you see \"Happy Helming!\" message as shown above.\n\n\n7. Install an example MySQL chart\nRun **helm install** command.  Here is the usage of the command:\n>  helm install [NAME] [CHART] [flags]\n\n```\nkenuenonoMacBook-Air:~ kenueno$ helm install example-mysql stable/mysql\nNAME: example-mysql\nLAST DEPLOYED: Wed Mar 18 00:19:38 2020\nNAMESPACE: mysql\nSTATUS: deployed\nREVISION: 1\nNOTES:\nMySQL can be accessed via port 3306 on the following DNS name from within your cluster:\nexample-mysql.mysql.svc.cluster.local\n\nTo get your root password run:\n\n    MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace mysql example-mysql -o jsonpath=\"{.data.mysql-root-password}\" | base64 --decode; echo)\n\nTo connect to your database:\n\n1. Run an Ubuntu pod that you can use as a client:\n\n    kubectl run -i --tty ubuntu --image=ubuntu:16.04 --restart=Never -- bash -il\n\n2. Install the mysql client:\n\n    $ apt-get update && apt-get install mysql-client -y\n\n3. Connect using the mysql cli, then provide your password:\n    $ mysql -h example-mysql -p\n\nTo connect to your database directly from outside the K8s cluster:\n    MYSQL_HOST=127.0.0.1\n    MYSQL_PORT=3306\n\n    # Execute the following command to route the connection:\n    kubectl port-forward svc/example-mysql 3306\n\n    mysql -h ${MYSQL_HOST} -P${MYSQL_PORT} -u root -p${MYSQL_ROOT_PASSWORD}\nkenuenonoMacBook-Air:~ kenueno$\n```\n\n8. Verify that the chart has installed successfully\nRun **helm list** command to verify that the chart \"example-mysql\" is installed.\n\n>This command lists all of the releases for a specified namespace (uses current namespace context if namespace not specified).\n\n```\nkenuenonoMacBook-Air:~ kenueno$ helm list\nNAME         \tNAMESPACE\tREVISION\tUPDATED                             \tSTATUS  \tCHART      \tAPP VERSION\nexample-mysql\tmysql    \t1       \t2020-03-18 00:19:38.477434 +0900 JST\tdeployed\tmysql-1.6.2\t5.7.28     \nkenuenonoMacBook-Air:~ kenueno$\n```\nYou should see the chart \"example-mysql\" in the \"mysql\" namespace (= project).\n\n9. Verity that the application is running on Web Console\nOn the OpenShift web console, you can verify that the application you installed via Helm is running.\n\n![helm4](/assets/img/day2/helm4.png \"Web Console\")\n\n![helm5](/assets/img/day2/helm5.png \"Web Console\")\n\n![helm6](/assets/img/day2/helm6.png \"Web Console\")\n\n\nhttps://docs.openshift.com/container-platform/4.3/cli_reference/helm_cli/getting-started-with-helm-on-openshift-container-platform.html#installing-a-helm-chart-on-an-openshift-cluster_getting-started-with-helm-on-openshift\n\n\n## Creating a custom Helm chart on OpenShift\nNow, we will work on the second scenario.\n\n1. Create a new project\nWe will create another project called \"nodejs-ex-k\" as follow.\n\n```\nkenuenonoMacBook-Air:~ kenueno$ cd RedHat/OpenShift/4.3/azure/\nkenuenonoMacBook-Air:azure kenueno$ pwd\n/Users/kenueno/RedHat/OpenShift/4.3/azure\nkenuenonoMacBook-Air:azure kenueno$ \nkenuenonoMacBook-Air:azure kenueno$ oc new-project nodejs-ex-k\nNow using project \"nodejs-ex-k\" on server \"https://api.csmoazure1.csmoprivate.tk:6443\".\n\nYou can add applications to this project with the 'new-app' command. For example, try:\n\n    oc new-app django-psql-example\n\nto build a new example application in Python. Or use kubectl to deploy a simple Kubernetes application:\n\n    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node\n\nkenuenonoMacBook-Air:azure kenueno$ \n```\n\n2. Download an example Node.js chart that contains OpenShift Container Platform objects\nFor this scenario, we will download a sample chart from the GitHub as shown below.\n\n```\nkenuenonoMacBook-Air:azure kenueno$ git clone https://github.com/redhat-developer/redhat-helm-charts\nCloning into 'redhat-helm-charts'...\nremote: Enumerating objects: 61, done.\nremote: Counting objects: 100% (61/61), done.\nremote: Compressing objects: 100% (45/45), done.\nremote: Total 61 (delta 22), reused 42 (delta 11), pack-reused 0\nUnpacking objects: 100% (61/61), done.\nkenuenonoMacBook-Air:azure kenueno$\n```\n\n\n3. Go to the directory with the sample chart\nOnce you clone the git repo, move to the directory as shown below.\n\n```\nkenuenonoMacBook-Air:azure kenueno$ cd redhat-helm-charts/alpha/nodejs-ex-k/\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ \nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ pwd\n/Users/kenueno/RedHat/OpenShift/4.3/azure/redhat-helm-charts/alpha/nodejs-ex-k\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$\n```\nMake sure that you are in the nodejs-ex-k directory.\n\n\n4. Edit the Chart.yaml file and add a description of your chart\n\nBefore we edit the Chart.yaml file, we make a copy and save it as Cart.yaml.org as follow. It's not necessary step but it would be a good practice.\n```\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ ls -la Chart.yaml\n-rw-r--r--  1 kenueno  staff  909 Mar 18 00:22 Chart.yaml\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ \nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ cp -p Chart.yaml Chart.yaml.org\n```\n\nThen we take a look at the Chart.yaml file.\n```\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ cat Chart.yaml\napiVersion: v2\nname: nodejs-ex-k\ndescription: A Helm chart for Kubernetes\n\n# A chart can be either an 'application' or a 'library' chart.\n#\n# Application charts are a collection of templates that can be packaged into versioned archives\n# to be deployed.\n#\n# Library charts provide useful utilities or functions for the chart developer. They're included as\n# a dependency of application charts to inject those utilities and functions into the rendering\n# pipeline. Library charts do not define any templates and therefore cannot be deployed.\ntype: application\n\n# This is the chart version. This version number should be incremented each time you make changes\n# to the chart and its templates, including the app version.\nversion: 0.1.0\n\n# This is the version number of the application being deployed. This version number should be\n# incremented each time you make changes to the application.\nappVersion: 1.16.0\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ \n```\n\nAs the official document said, we will add the following four key and value pairs:\n- The chart API version. It should be v2 for Helm charts that require at least Helm 3.\n- The name of your chart.\n- The description of your chart.\n- The URL to an image to be used as an icon.\n\nHere is what the official document said.\n```\napiVersion: v2 \nname: nodejs-ex-k \ndescription: A Helm chart for OpenShift \nicon: https://static.redhat.com/libs/redhat/brand-assets/latest/corp/logo.svg\n```\n\nHere is how our Chart.yaml looks like.\n```\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ vi Chart.yaml\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ cat Chart.yaml\napiVersion: v2\nname: nodejs-ex-k\ndescription: A Helm chart for OpenShift \nicon: https://static.redhat.com/libs/redhat/brand-assets/latest/corp/logo.svg\n\n# A chart can be either an 'application' or a 'library' chart.\n#\n# Application charts are a collection of templates that can be packaged into versioned archives\n# to be deployed.\n#\n# Library charts provide useful utilities or functions for the chart developer. They're included as\n# a dependency of application charts to inject those utilities and functions into the rendering\n# pipeline. Library charts do not define any templates and therefore cannot be deployed.\n# type: application\n\n# This is the chart version. This version number should be incremented each time you make changes\n# to the chart and its templates, including the app version.\n# version: 0.1.0\n\n# This is the version number of the application being deployed. This version number should be\n# incremented each time you make changes to the application.\n# appVersion: 1.16.0\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ \n```\nAs the OpenShift document said, we have 4 key and value paris and commented out rest of lines are commented out as shown above.\n\n\n5. Verify that the chart is formatted properly\nRun **helm lint** command to very that the chart (Chart.yaml) you created is formatted properly.\n\n>This command takes a path to a chart and runs a series of tests to verify that the chart is well-formed.\n>If the linter encounters things that will cause the chart to fail installation, it will emit [ERROR] messages. If it encounters issues that break with convention or recommendation, it will emit [WARNING] messages.\n\n```\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ helm lint\n==> Linting .\n[ERROR] Chart.yaml: version is required\n[ERROR] templates/: validation: chart.metadata.version is required\n\nError: 1 chart(s) linted, 1 chart(s) failed\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ \n```\n\nSigh...  We failed with an error message. It said \"version is required\".  Oh no... We commented out the line \"version: 0.1.0\" in the Chart.yaml file since the OpenShift document didn't mention it.\n\nWe need to add (comment out, in fact) the version in the Chart.yaml file as follow.\n\n```\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ vi Chart.yaml\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ cat Chart.yaml\napiVersion: v2\nname: nodejs-ex-k\ndescription: A Helm chart for OpenShift \nicon: https://static.redhat.com/libs/redhat/brand-assets/latest/corp/logo.svg\n\n# A chart can be either an 'application' or a 'library' chart.\n#\n# Application charts are a collection of templates that can be packaged into versioned archives\n# to be deployed.\n#\n# Library charts provide useful utilities or functions for the chart developer. They're included as\n# a dependency of application charts to inject those utilities and functions into the rendering\n# pipeline. Library charts do not define any templates and therefore cannot be deployed.\n# type: application\n\n# This is the chart version. This version number should be incremented each time you make changes\n# to the chart and its templates, including the app version.\nversion: 0.1.0\n\n# This is the version number of the application being deployed. This version number should be\n# incremented each time you make changes to the application.\n# appVersion: 1.16.0\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ \n```\n\nTry again. It should work. Run **helm lint** command as follow.\n```\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ helm lint\n==> Linting .\n\n1 chart(s) linted, 0 chart(s) failed\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ \n```\nNow it works. Yes!!  We need to make sure that the **version** in the chart.\n\n6. Install the chart\nWe will install the chart. Move (change directory) to the parent directory (alpha directory).\n```\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ cd ..\nkenuenonoMacBook-Air:alpha kenueno$ pwd\n/Users/kenueno/RedHat/OpenShift/4.3/azure/redhat-helm-charts/alpha\nkenuenonoMacBook-Air:alpha kenueno$ \n```\n\nRun **helm install** command.  Here is the usage of the command:\n>  helm install [NAME] [CHART] [flags]\n\n```\nkenuenonoMacBook-Air:alpha kenueno$ helm install nodejs-chart nodejs-ex-k\nNAME: nodejs-chart\nLAST DEPLOYED: Wed Mar 18 00:31:24 2020\nNAMESPACE: nodejs-ex-k\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nkenuenonoMacBook-Air:alpha kenueno$ \n```\n\n7. Verify that the chart has installed successfully\nRun **helm list** command as follow.\n```\nkenuenonoMacBook-Air:alpha kenueno$ helm list\nNAME        \tNAMESPACE  \tREVISION\tUPDATED                             \tSTATUS  \tCHART            \tAPP VERSION\nnodejs-chart\tnodejs-ex-k\t1       \t2020-03-18 00:31:24.217591 +0900 JST\tdeployed\tnodejs-ex-k-0.1.0\t           \nkenuenonoMacBook-Air:alpha kenueno$ \n```\nMake sure that there is **nodejs-chart** helm chart is displayed.\n\n\n8. Verity that the application is running on Web Console\nOn the OpenShift web console, you can verify that the application you installed via Helm is running.\n\n![helm7](/assets/img/day2/helm7.png \"Web Console\")\n\n![helm8](/assets/img/day2/helm8.png \"Web Console\")\n\n![helm9](/assets/img/day2/helm9.png \"Web Console\")\n\n\nhttps://docs.openshift.com/container-platform/4.3/cli_reference/helm_cli/getting-started-with-helm-on-openshift-container-platform.html#creating-a-custom-helm-chart-on-openshift_getting-started-with-helm-on-openshift","type":"Mdx","contentDigest":"b18f6e09689b925d3e9cfcdf0ea89662","counter":399,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"OpenShift Platform Day2 - Supplement - Helm 3 for OpenShift","description":"OCP Day2 Upgrade","keywords":"ocp, day2, supplement, helm3"},"exports":{},"rawBody":"---\ntitle: OpenShift Platform Day2 - Supplement - Helm 3 for OpenShift\ndescription: OCP Day2 Upgrade\nkeywords: 'ocp, day2, supplement, helm3'\n---\n\n\n# Helm 3 for OpenShift\nYou can find out many technical articles and blogs which talked about Helm on OpenShift. \nHelm is a package manager for Kubernetes that helps you more easily package, configure, and deploy applications onto Kubernetes clusters. OpenShift has been providing several deployment methods but Helm surprisingly.\n\nIn OpenShift 4.3, Helm 3 for OpenShift Container Platform is introduced as a Technology Preview feature.　Yeah!\n\nThere is a bog which talked about this feature. We encourage you to read the blog to understand Helm on OpenShift.\nhttps://blog.openshift.com/openshift-4-3-deploy-applications-with-helm-3/\n\n\nIn this document, we will not exaplin the feature of Helm on Openshift.  Instead, we will demonstrate the feature by following the steps in the OpenShift official document.\nSince the official product document does not include the actual commands output (results of commands execution), we will include those for your reference.  Other than those sample output, you can find out most of information in the product official document.\n\nhttps://docs.openshift.com/container-platform/4.3/cli_reference/helm_cli/getting-started-with-helm-on-openshift-container-platform.html\n\n\n## Environment\nFor this document, we use OpenShift 4.3.5 on Azure (installed via IPI, not ARO).\nWe will install Helm on our laptop which is MacBook Air. The OS is Mojava (10.14.6).\n\n\n## Installing Helm on Mac\nThere are two ways to install the Helm binary onto your laptop.\n\n### Installing Helm via CLI\nThe official document explains how to install Helm via CLI. For demonstration purposes, we will execute a few more commands than what the officail document said.\n\n\n1. Uninstall previous version of helm from the laptop\nIn our case, we unstall the helm 2 command which was installed previously to have a clean environment. If you don't have helm installed, then you can skip this. If you want to keep the previous helm installation, please find out the way to have multiple installations (versions) and make sure that it will work.\n\nRun **which** command to find out if helm command is in the PATH.\n```\nkenuenonoMacBook-Air:~ kenueno$ which helm\n/usr/local/bin/helm\nkenuenonoMacBook-Air:~ kenueno$ \n```\n\nIn out case, it's in the /usr/local/bin and it's Helm version 2. We ran **helm version** command as below.\n```\nkenuenonoMacBook-Air:~ kenueno$ helm version\nClient: &version.Version{SemVer:\"v2.9.1\", GitCommit:\"20adb27c7c5868466912eebdf6664e7390ebe710\", GitTreeState:\"clean\"}\n```\n\nThen, we ran **brew list** command to see if it's installed via **brew** as shown below.\n```\nkenuenonoMacBook-Air:~ kenueno$ brew list\nansible\t\t\tbash-completion@2\thelm\t\t\t    libnet\t\t\t    oniguruma\t\treadline\t\txz\nasdf\t\t\tcertbot\t\t\t    icu4c\t\t\t    libtool\t\t\t    openssl\t\t\tspruce\t\t\tyarn\naugeas\t\t\tcoreutils\t\t    jmeter\t\t\t    libunistring\t\topenssl@1.1\t\tsqlite\nautoconf\t\tdialog\t\t\t    jq\t\t\t        libyaml\t\t\t    pkg-config\t\ttcptraceroute\nautomake\t\tdvm\t\t\t        kubernetes-cli\t\tmaven\t\t\t    postgresql\t\ttree\nazure-cli\t\tgdbm\t\t\t    kubernetes-helm\t\tminikube\t\t    python\t\t\tunixodbc\nbash\t\t\tgettext\t\t\t    libidn2\t\t\t    node\t\t\t    python@3.8\t\twget\nkenuenonoMacBook-Air:~ kenueno$\n```\n\nSo, it's installed via brew. Then, ran **brew uninstall** command to delete helm version 2.\n```\nkenuenonoMacBook-Air:~ kenueno$ brew uninstall helm\nUninstalling /usr/local/Cellar/helm/2.9.1... (50 files, 66.2MB)\nkenuenonoMacBook-Air:~ kenueno$ \nkenuenonoMacBook-Air:~ kenueno$ brew uninstall kubernetes-helm\nError: No such keg: /usr/local/Cellar/helm\nkenuenonoMacBook-Air:~ kenueno$ \nkenuenonoMacBook-Air:~ kenueno$ brew list\nansible\t\t\tbash\t\t\t    gdbm\t\t\t    libidn2\t\t\t    minikube\t\tpostgresql\t    tcptraceroute\nasdf\t\t\tbash-completion@2\tgettext\t\t\t    libnet\t\t\t    node\t\t\tpython\t\t\ttree\naugeas\t\t\tcertbot\t\t\t    icu4c\t\t\t    libtool\t\t\t    oniguruma\t\tpython@3.8\t\tunixodbc\nautoconf\t\tcoreutils\t\t    jmeter\t\t\t    libunistring\t\topenssl\t\t\treadline\t\twget\nautomake\t\tdialog\t\t\t    jq\t\t\t        libyaml\t\t\t    openssl@1.1\t\tspruce\t\t\txz\nazure-cli\t\tdvm\t\t\t        kubernetes-cli\t\tmaven\t\t\t    pkg-config\t\tsqlite\t\t\tyarn\nkenuenonoMacBook-Air:~ kenueno$\n```\nAs you see above, we ran **brew uninstall helm** command and it deleted both **helm** and **kubernetes-helm** formulas.\n\nBefore we install helm 3, make sure that helm 2 is removed from /usr/local/bin and it's not in the PATH as follow.\n```\nkenuenonoMacBook-Air:~ kenueno$ ls -la /usr/local/bin/helm\nls: /usr/local/bin/helm: No such file or directory\nkenuenonoMacBook-Air:~ kenueno$ \nkenuenonoMacBook-Air:~ kenueno$ which helm\nkenuenonoMacBook-Air:~ kenueno$\n```\n\n2. Download the Helm binary and add it to your path\nNow, we will download the Helm 3 binary and put it into **/usr/local/bin** folder.\n```\nkenuenonoMacBook-Air:~ kenueno$ curl -L https://mirror.openshift.com/pub/openshift-v4/clients/helm/latest/helm-darwin-amd64 -o /usr/local/bin/helm\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 41.4M  100 41.4M    0     0   653k      0  0:01:04  0:01:04 --:--:--  629k\nkenuenonoMacBook-Air:~ kenueno$ \n```\n\nRight after you download it to your laptop, it is not executable.\n```\nkenuenonoMacBook-Air:~ kenueno$ which helm\n```\n\n3. Make the binary file executable\nRun **chmod** command to make the helm command executable as follow.\n```\nkenuenonoMacBook-Air:~ kenueno$ sudo chmod +x /usr/local/bin/helm\nPassword:\nkenuenonoMacBook-Air:~ kenueno$ which helm\n/usr/local/bin/helm\nkenuenonoMacBook-Air:~ kenueno$ \n```\nAs you see above, the **helm** command is now in the PATH (/usr/local/bin) and excecutable.\n\n4. Check the installed version\nRun **helm version** command as follow.\n```\nkenuenonoMacBook-Air:~ kenueno$ helm version\nversion.BuildInfo{Version:\"v3.1+unreleased\", GitCommit:\"7ebdbb86fca32c77f2fce166f7f9e58ebf7e9946\", GitTreeState:\"clean\", GoVersion:\"go1.13.4\"}\nkenuenonoMacBook-Air:~ kenueno$ \n```\nAs of writing this document, the latest version of the helm command from OpenShift site is v3.1 which is newer than what the official document said.\n\n\nhttps://docs.openshift.com/container-platform/4.3/cli_reference/helm_cli/getting-started-with-helm-on-openshift-container-platform.html#on-macos\n\n\n### Installing Helm via OpenShift Web console\nYou can also intall the helm binary via OpenShift Web console.\n\nOn the right-upper corner on the Web console, there is \"?\" mark button.　Click that button and you will see the **Command Line Tools** on the pull-down menu.\nClick on the **Command Line Tools** then you will see **Command Line Tools** page as shown in below.\n\n![helm1](/assets/img/day2/helm1.png \"Pull-down menu\")\n\nClick on **Download helm** link as shown in below.\n\n![helm2](/assets/img/day2/helm2.png \"Command Line Tools Page\")\n\nThen you will got to the external openshift site where you can see the list of helm binary. Select the binary to download as shown in below. In our case, we select **helm-darwin-adm64** for Mac.\n![helm3](/assets/img/day2/helm3.png \"List of Helm binary\")\n\n\nNow, you have the helm 3 command on your laptop. In the following sections, we will demonstrate two senarios.\n\n\n## Installing a Helm chart on OpenShift\nLet's install your first Helm chart on OpenShift 4.3.5 cluster.\n\n1. Make sure that you have helm 3 installed on your laptop (or where ever you would execute helm command)\n\n2. Make sure that your OpenShift 4.3 cluster is up and running\n\n3. Log in to your OpenShift cluster via CLI\nIn our case, we use the token instead of the password with **oc login** command as follow.\n\n```\nkenuenonoMacBook-Air:~ kenueno$ oc login --token=xdacabababa_fVweYqG3Gisgeasgh4_hpRietebarfZaB --server=https://api.csmoazure1.csmoprivate.tk:6443\nThe server uses a certificate signed by an unknown authority.\nYou can bypass the certificate check, but any data you send to the server could be intercepted by others.\nUse insecure connections? (y/n): y\n\nLogged into \"https://api.csmoazure1.csmoprivate.tk:6443\" as \"kenueno\" using the token provided.\n\nYou have access to 54 projects, the list has been suppressed. You can list all projects with 'oc projects'\n\nUsing project \"default\".\nkenuenonoMacBook-Air:~ kenueno$ \n```\n\n4. Create a new project\nRun **oc new-project** command to create a new project.  In our case, the name of project is \"mysql\" as shown below.\n\n```\nkenuenonoMacBook-Air:~ kenueno$ oc new-project mysql\nNow using project \"mysql\" on server \"https://api.csmoazure1.csmoprivate.tk:6443\".\n\nYou can add applications to this project with the 'new-app' command. For example, try:\n\n    oc new-app django-psql-example\n\nto build a new example application in Python. Or use kubectl to deploy a simple Kubernetes application:\n\n    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node\n\nkenuenonoMacBook-Air:~ kenueno$\n```\n\n\n5. Add a repository of Helm charts to your local Helm client\nRun **helm repo add** command and here is the command usage:\n> helm repo add [NAME] [URL] [flags]\n\n```\nkenuenonoMacBook-Air:~ kenueno$ helm repo add stable https://kubernetes-charts.storage.googleapis.com/\n\"stable\" has been added to your repositories\nkenuenonoMacBook-Air:~ kenueno$ \n```\n\n\n6. Update the repository\nRun **helm repo update** command.\n>Update gets the latest information about charts from the respective chart repositories.\n>Information is cached locally, where it is used by commands like 'helm search'.\n\n```\nkenuenonoMacBook-Air:~ kenueno$ helm repo update\nHang tight while we grab the latest from your chart repositories...\n...Successfully got an update from the \"stable\" chart repository\nUpdate Complete. ⎈ Happy Helming!⎈ \nkenuenonoMacBook-Air:~ kenueno$ \n```\nMake sure that you see \"Happy Helming!\" message as shown above.\n\n\n7. Install an example MySQL chart\nRun **helm install** command.  Here is the usage of the command:\n>  helm install [NAME] [CHART] [flags]\n\n```\nkenuenonoMacBook-Air:~ kenueno$ helm install example-mysql stable/mysql\nNAME: example-mysql\nLAST DEPLOYED: Wed Mar 18 00:19:38 2020\nNAMESPACE: mysql\nSTATUS: deployed\nREVISION: 1\nNOTES:\nMySQL can be accessed via port 3306 on the following DNS name from within your cluster:\nexample-mysql.mysql.svc.cluster.local\n\nTo get your root password run:\n\n    MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace mysql example-mysql -o jsonpath=\"{.data.mysql-root-password}\" | base64 --decode; echo)\n\nTo connect to your database:\n\n1. Run an Ubuntu pod that you can use as a client:\n\n    kubectl run -i --tty ubuntu --image=ubuntu:16.04 --restart=Never -- bash -il\n\n2. Install the mysql client:\n\n    $ apt-get update && apt-get install mysql-client -y\n\n3. Connect using the mysql cli, then provide your password:\n    $ mysql -h example-mysql -p\n\nTo connect to your database directly from outside the K8s cluster:\n    MYSQL_HOST=127.0.0.1\n    MYSQL_PORT=3306\n\n    # Execute the following command to route the connection:\n    kubectl port-forward svc/example-mysql 3306\n\n    mysql -h ${MYSQL_HOST} -P${MYSQL_PORT} -u root -p${MYSQL_ROOT_PASSWORD}\nkenuenonoMacBook-Air:~ kenueno$\n```\n\n8. Verify that the chart has installed successfully\nRun **helm list** command to verify that the chart \"example-mysql\" is installed.\n\n>This command lists all of the releases for a specified namespace (uses current namespace context if namespace not specified).\n\n```\nkenuenonoMacBook-Air:~ kenueno$ helm list\nNAME         \tNAMESPACE\tREVISION\tUPDATED                             \tSTATUS  \tCHART      \tAPP VERSION\nexample-mysql\tmysql    \t1       \t2020-03-18 00:19:38.477434 +0900 JST\tdeployed\tmysql-1.6.2\t5.7.28     \nkenuenonoMacBook-Air:~ kenueno$\n```\nYou should see the chart \"example-mysql\" in the \"mysql\" namespace (= project).\n\n9. Verity that the application is running on Web Console\nOn the OpenShift web console, you can verify that the application you installed via Helm is running.\n\n![helm4](/assets/img/day2/helm4.png \"Web Console\")\n\n![helm5](/assets/img/day2/helm5.png \"Web Console\")\n\n![helm6](/assets/img/day2/helm6.png \"Web Console\")\n\n\nhttps://docs.openshift.com/container-platform/4.3/cli_reference/helm_cli/getting-started-with-helm-on-openshift-container-platform.html#installing-a-helm-chart-on-an-openshift-cluster_getting-started-with-helm-on-openshift\n\n\n## Creating a custom Helm chart on OpenShift\nNow, we will work on the second scenario.\n\n1. Create a new project\nWe will create another project called \"nodejs-ex-k\" as follow.\n\n```\nkenuenonoMacBook-Air:~ kenueno$ cd RedHat/OpenShift/4.3/azure/\nkenuenonoMacBook-Air:azure kenueno$ pwd\n/Users/kenueno/RedHat/OpenShift/4.3/azure\nkenuenonoMacBook-Air:azure kenueno$ \nkenuenonoMacBook-Air:azure kenueno$ oc new-project nodejs-ex-k\nNow using project \"nodejs-ex-k\" on server \"https://api.csmoazure1.csmoprivate.tk:6443\".\n\nYou can add applications to this project with the 'new-app' command. For example, try:\n\n    oc new-app django-psql-example\n\nto build a new example application in Python. Or use kubectl to deploy a simple Kubernetes application:\n\n    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node\n\nkenuenonoMacBook-Air:azure kenueno$ \n```\n\n2. Download an example Node.js chart that contains OpenShift Container Platform objects\nFor this scenario, we will download a sample chart from the GitHub as shown below.\n\n```\nkenuenonoMacBook-Air:azure kenueno$ git clone https://github.com/redhat-developer/redhat-helm-charts\nCloning into 'redhat-helm-charts'...\nremote: Enumerating objects: 61, done.\nremote: Counting objects: 100% (61/61), done.\nremote: Compressing objects: 100% (45/45), done.\nremote: Total 61 (delta 22), reused 42 (delta 11), pack-reused 0\nUnpacking objects: 100% (61/61), done.\nkenuenonoMacBook-Air:azure kenueno$\n```\n\n\n3. Go to the directory with the sample chart\nOnce you clone the git repo, move to the directory as shown below.\n\n```\nkenuenonoMacBook-Air:azure kenueno$ cd redhat-helm-charts/alpha/nodejs-ex-k/\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ \nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ pwd\n/Users/kenueno/RedHat/OpenShift/4.3/azure/redhat-helm-charts/alpha/nodejs-ex-k\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$\n```\nMake sure that you are in the nodejs-ex-k directory.\n\n\n4. Edit the Chart.yaml file and add a description of your chart\n\nBefore we edit the Chart.yaml file, we make a copy and save it as Cart.yaml.org as follow. It's not necessary step but it would be a good practice.\n```\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ ls -la Chart.yaml\n-rw-r--r--  1 kenueno  staff  909 Mar 18 00:22 Chart.yaml\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ \nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ cp -p Chart.yaml Chart.yaml.org\n```\n\nThen we take a look at the Chart.yaml file.\n```\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ cat Chart.yaml\napiVersion: v2\nname: nodejs-ex-k\ndescription: A Helm chart for Kubernetes\n\n# A chart can be either an 'application' or a 'library' chart.\n#\n# Application charts are a collection of templates that can be packaged into versioned archives\n# to be deployed.\n#\n# Library charts provide useful utilities or functions for the chart developer. They're included as\n# a dependency of application charts to inject those utilities and functions into the rendering\n# pipeline. Library charts do not define any templates and therefore cannot be deployed.\ntype: application\n\n# This is the chart version. This version number should be incremented each time you make changes\n# to the chart and its templates, including the app version.\nversion: 0.1.0\n\n# This is the version number of the application being deployed. This version number should be\n# incremented each time you make changes to the application.\nappVersion: 1.16.0\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ \n```\n\nAs the official document said, we will add the following four key and value pairs:\n- The chart API version. It should be v2 for Helm charts that require at least Helm 3.\n- The name of your chart.\n- The description of your chart.\n- The URL to an image to be used as an icon.\n\nHere is what the official document said.\n```\napiVersion: v2 \nname: nodejs-ex-k \ndescription: A Helm chart for OpenShift \nicon: https://static.redhat.com/libs/redhat/brand-assets/latest/corp/logo.svg\n```\n\nHere is how our Chart.yaml looks like.\n```\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ vi Chart.yaml\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ cat Chart.yaml\napiVersion: v2\nname: nodejs-ex-k\ndescription: A Helm chart for OpenShift \nicon: https://static.redhat.com/libs/redhat/brand-assets/latest/corp/logo.svg\n\n# A chart can be either an 'application' or a 'library' chart.\n#\n# Application charts are a collection of templates that can be packaged into versioned archives\n# to be deployed.\n#\n# Library charts provide useful utilities or functions for the chart developer. They're included as\n# a dependency of application charts to inject those utilities and functions into the rendering\n# pipeline. Library charts do not define any templates and therefore cannot be deployed.\n# type: application\n\n# This is the chart version. This version number should be incremented each time you make changes\n# to the chart and its templates, including the app version.\n# version: 0.1.0\n\n# This is the version number of the application being deployed. This version number should be\n# incremented each time you make changes to the application.\n# appVersion: 1.16.0\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ \n```\nAs the OpenShift document said, we have 4 key and value paris and commented out rest of lines are commented out as shown above.\n\n\n5. Verify that the chart is formatted properly\nRun **helm lint** command to very that the chart (Chart.yaml) you created is formatted properly.\n\n>This command takes a path to a chart and runs a series of tests to verify that the chart is well-formed.\n>If the linter encounters things that will cause the chart to fail installation, it will emit [ERROR] messages. If it encounters issues that break with convention or recommendation, it will emit [WARNING] messages.\n\n```\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ helm lint\n==> Linting .\n[ERROR] Chart.yaml: version is required\n[ERROR] templates/: validation: chart.metadata.version is required\n\nError: 1 chart(s) linted, 1 chart(s) failed\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ \n```\n\nSigh...  We failed with an error message. It said \"version is required\".  Oh no... We commented out the line \"version: 0.1.0\" in the Chart.yaml file since the OpenShift document didn't mention it.\n\nWe need to add (comment out, in fact) the version in the Chart.yaml file as follow.\n\n```\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ vi Chart.yaml\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ cat Chart.yaml\napiVersion: v2\nname: nodejs-ex-k\ndescription: A Helm chart for OpenShift \nicon: https://static.redhat.com/libs/redhat/brand-assets/latest/corp/logo.svg\n\n# A chart can be either an 'application' or a 'library' chart.\n#\n# Application charts are a collection of templates that can be packaged into versioned archives\n# to be deployed.\n#\n# Library charts provide useful utilities or functions for the chart developer. They're included as\n# a dependency of application charts to inject those utilities and functions into the rendering\n# pipeline. Library charts do not define any templates and therefore cannot be deployed.\n# type: application\n\n# This is the chart version. This version number should be incremented each time you make changes\n# to the chart and its templates, including the app version.\nversion: 0.1.0\n\n# This is the version number of the application being deployed. This version number should be\n# incremented each time you make changes to the application.\n# appVersion: 1.16.0\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ \n```\n\nTry again. It should work. Run **helm lint** command as follow.\n```\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ helm lint\n==> Linting .\n\n1 chart(s) linted, 0 chart(s) failed\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ \n```\nNow it works. Yes!!  We need to make sure that the **version** in the chart.\n\n6. Install the chart\nWe will install the chart. Move (change directory) to the parent directory (alpha directory).\n```\nkenuenonoMacBook-Air:nodejs-ex-k kenueno$ cd ..\nkenuenonoMacBook-Air:alpha kenueno$ pwd\n/Users/kenueno/RedHat/OpenShift/4.3/azure/redhat-helm-charts/alpha\nkenuenonoMacBook-Air:alpha kenueno$ \n```\n\nRun **helm install** command.  Here is the usage of the command:\n>  helm install [NAME] [CHART] [flags]\n\n```\nkenuenonoMacBook-Air:alpha kenueno$ helm install nodejs-chart nodejs-ex-k\nNAME: nodejs-chart\nLAST DEPLOYED: Wed Mar 18 00:31:24 2020\nNAMESPACE: nodejs-ex-k\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nkenuenonoMacBook-Air:alpha kenueno$ \n```\n\n7. Verify that the chart has installed successfully\nRun **helm list** command as follow.\n```\nkenuenonoMacBook-Air:alpha kenueno$ helm list\nNAME        \tNAMESPACE  \tREVISION\tUPDATED                             \tSTATUS  \tCHART            \tAPP VERSION\nnodejs-chart\tnodejs-ex-k\t1       \t2020-03-18 00:31:24.217591 +0900 JST\tdeployed\tnodejs-ex-k-0.1.0\t           \nkenuenonoMacBook-Air:alpha kenueno$ \n```\nMake sure that there is **nodejs-chart** helm chart is displayed.\n\n\n8. Verity that the application is running on Web Console\nOn the OpenShift web console, you can verify that the application you installed via Helm is running.\n\n![helm7](/assets/img/day2/helm7.png \"Web Console\")\n\n![helm8](/assets/img/day2/helm8.png \"Web Console\")\n\n![helm9](/assets/img/day2/helm9.png \"Web Console\")\n\n\nhttps://docs.openshift.com/container-platform/4.3/cli_reference/helm_cli/getting-started-with-helm-on-openshift-container-platform.html#creating-a-custom-helm-chart-on-openshift_getting-started-with-helm-on-openshift","fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/cloudpak8s/src/pages/day2/Sup_Helm3/index.mdx"}}}}